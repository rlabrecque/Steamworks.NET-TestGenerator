{
	"variables":
    [
    	["bool", "m_InputInitialized"],
        ["int", "m_nInputs"]
    ],

	"onenablecode": [
		"m_InputInitialized = SteamInput.Init(false);",
		"print(\"SteamInput.Init() - \" + m_InputInitialized);",
		"m_InputHandles = new InputHandle_t[Constants.STEAM_INPUT_MAX_COUNT];",
		"",
		"if (m_InputInitialized) {",
		"\tPrecache();",
		"}",
		"",
		"// TODO: Activate some default ActionSet?"
	],

	"extrafunctions": [
		"void OnDisable() {",
		"\tm_InputInitialized = false;",
		"\tprint(\"SteamInput.Shutdown() - \" + SteamInput.Shutdown());",
		"}",
		"",
		"enum EActionSets {",
		"\tInGameControls,",
		"\tMenuControls,",
		"}",
		"",
		"enum EAnalogActions_InGameControls {",
		"\tMove,",
		"\tCamera,",
		"\tThrottle,",
		"}",
		"",
		"enum EDigitalActions_InGameControls {",
		"\tfire,",
		"\tJump,",
		"\tpause_menu,",
		"}",
		"",
		"enum EDigitalActions_MenuControls {",
		"\tmenu_up,",
		"\tmenu_down,",
		"\tmenu_left,",
		"\tmenu_right,",
		"\tmenu_select,",
		"\tmenu_cancel,",
		"\tpause_menu,",
		"}",
		"",
		"int m_nActionSets;",
		"int m_nInGameControlsAnalogActions;",
		"int m_nInGameControlsDigitalActions;",
		"int m_nMenuControlsDigitalActions;",
		"",
		"string[] m_ActionSetNames;",
		"string[] m_InGameControlsAnalogActionNames;",
		"string[] m_InGameControlsDigitalActionNames;",
		"string[] m_MenuControlsDigitalActionNames;",
		"",
		"InputActionSetHandle_t[] m_ActionSets;",
		"InputAnalogActionHandle_t[] m_InGameControlsAnalogActions;",
		"InputDigitalActionHandle_t[] m_InGameControlsDigitalActions;",
		"InputDigitalActionHandle_t[] m_MenuControlsDigitalActions;",
		"",
		"InputHandle_t[] m_InputHandles;",
		"",
		"void Precache() {",
		"\t// ActionSets",
		"\tm_ActionSetNames = System.Enum.GetNames(typeof(EActionSets));",
		"\tm_nActionSets = m_ActionSetNames.Length;",
		"\tm_ActionSets = new InputActionSetHandle_t[m_nActionSets];",
		"",
		"\tfor(int i = 0; i < m_nActionSets; ++i) {",
		"\t\tm_ActionSets[i] = SteamInput.GetActionSetHandle(m_ActionSetNames[i]);",
		"\t\tprint(\"SteamInput.GetActionSetHandle(\" + m_ActionSetNames[i] + \") - \" + m_ActionSets[i]);",
		"\t}",
		"",
		"\t// Actions",
		"",
		"\t// InGameControls Analog Actions",
		"\tm_InGameControlsAnalogActionNames = System.Enum.GetNames(typeof(EAnalogActions_InGameControls));",
		"\tm_nInGameControlsAnalogActions = m_InGameControlsAnalogActionNames.Length;",
		"\tm_InGameControlsAnalogActions = new InputAnalogActionHandle_t[m_nInGameControlsAnalogActions];",
		"",
		"\tfor (int i = 0; i < m_nInGameControlsAnalogActions; ++i) {",
		"\t\tm_InGameControlsAnalogActions[i] = SteamInput.GetAnalogActionHandle(m_InGameControlsAnalogActionNames[i]);",
		"\t\tprint(\"SteamInput.GetAnalogActionHandle(\" + m_InGameControlsAnalogActionNames[i] + \") - \" + m_InGameControlsAnalogActions[i]);",
		"\t}",
		"",
		"\t// InGameControls Digital Actions",
		"\tm_InGameControlsDigitalActionNames = System.Enum.GetNames(typeof(EDigitalActions_InGameControls));",
		"\tm_nInGameControlsDigitalActions = m_InGameControlsDigitalActionNames.Length;",
		"\tm_InGameControlsDigitalActions = new InputDigitalActionHandle_t[m_nInGameControlsDigitalActions];",
		"",
		"\tfor (int i = 0; i < m_nInGameControlsDigitalActions; ++i) {",
		"\t\tm_InGameControlsDigitalActions[i] = SteamInput.GetDigitalActionHandle(m_InGameControlsDigitalActionNames[i]);",
		"\t\tprint(\"SteamInput.GetDigitalActionHandle(\" + m_InGameControlsDigitalActionNames[i] + \") - \" + m_InGameControlsDigitalActions[i]);",
		"\t}",
		"",
		"\t// MenuControls Digital Actions",
		"\tm_MenuControlsDigitalActionNames = System.Enum.GetNames(typeof(EDigitalActions_MenuControls));",
		"\tm_nMenuControlsDigitalActions = m_MenuControlsDigitalActionNames.Length;",
		"\tm_MenuControlsDigitalActions = new InputDigitalActionHandle_t[m_nMenuControlsDigitalActions];",
		"",
		"\tfor (int i = 0; i < m_nMenuControlsDigitalActions; ++i) {",
		"\t\tm_MenuControlsDigitalActions[i] = SteamInput.GetDigitalActionHandle(m_MenuControlsDigitalActionNames[i]);",
		"\t\tprint(\"SteamInput.GetDigitalActionHandle(\" + m_MenuControlsDigitalActionNames[i] + \") - \" + m_MenuControlsDigitalActions[i]);",
		"\t}",
		"}"
	],

	"functions":
	[
		{
			"name": "Init",
			"override": [
				"if (!m_InputInitialized) {",
				"\treturn;",
				"}"
			]
		},
		{
			"name": "Shutdown",
			"skip": "Called in OnDisable()"
		},
		{
			"name": "RunFrame",
			"skip": "N/A - This is called automatically by SteamAPI.RunCallbacks()"
		},
		{
			"name": "GetConnectedControllers",
			"label": true,
			"returnname": "m_nInputs",
			"args": ["m_InputHandles"]
		},
		{
			"name": "GetActionSetHandle",
			"skip": "Called in Precache()"
		},
		{
			"name": "ActivateActionSet",
			"args": ["m_InputHandles[i]", "m_ActionSets[j]"],
			"preindent": [
				"for (int i = 0; i < m_nInputs; ++i) {",
				"\tGUILayout.Label(\"Input \" + i + \" - \" + m_InputHandles[i]);",
				"",
				"\tfor (int j = 0; j < m_nActionSets; ++j) {"
			],
			"postindent": [
				"\t}"
			],
			"indent": 2
		},
		{
			"name": "GetCurrentActionSet",
			"args": ["m_InputHandles[i]"],
			"label": true,
			"indent": -1
		},
		{
			"name": "ActivateActionSetLayer",
			"skip": "TODO"
		},
		{
			"name": "DeactivateActionSetLayer",
			"skip": "TODO"
		},
		{
			"name": "DeactivateAllActionSetLayers",
			"skip": "TODO"
		},
		{
			"name": "GetActiveActionSetLayers",
			"skip": "TODO"
		},
		{
			"name": "GetDigitalActionHandle",
			"skip": "Called in Precache()"
		},
		{
			"name": "GetDigitalActionData",
			"override": [
				"GUILayout.Label(\"InGameControls Digital Actions:\");",
				"for (int j = 0; j < m_nInGameControlsDigitalActions; ++j) {",
				"\tInputDigitalActionData_t ret = SteamInput.GetDigitalActionData(m_InputHandles[i], m_InGameControlsDigitalActions[j]);",
				"\tGUILayout.Label(\"GetDigitalActionData(\" + m_InputHandles[i] + \", \" + m_InGameControlsDigitalActions[j] + \") - \" + ret.bState + \" -- \" + ret.bActive + \" -- \" + m_InGameControlsDigitalActionNames[j]);",
				"}",
				"",
				"GUILayout.Label(\"MenuControls Digital Actions:\");",
				"for (int j = 0; j < m_nMenuControlsDigitalActions; ++j) {",
				"\tInputDigitalActionData_t ret = SteamInput.GetDigitalActionData(m_InputHandles[i], m_MenuControlsDigitalActions[j]);",
				"\tGUILayout.Label(\"GetDigitalActionData(\" + m_InputHandles[i] + \", \" + m_MenuControlsDigitalActions[j] + \") - \" + ret.bState + \" -- \" + ret.bActive + \" -- \" + m_MenuControlsDigitalActionNames[j]);",
				"}"
			]
		},
		{
			"name": "GetDigitalActionOrigins",
			"args": ["m_InputHandles[i]", "m_ActionSets[(int)EActionSets.InGameControls]", "m_InGameControlsDigitalActions[(int)EDigitalActions_InGameControls.fire]", "origins"],
			"precall": ["EInputActionOrigin[] origins = new EInputActionOrigin[Constants.STEAM_INPUT_MAX_ORIGINS];"],
			"postprint": [
				"print(ret + \" origins for: \" + m_ActionSetNames[(int)EActionSets.InGameControls] + \"::\" + m_InGameControlsDigitalActionNames[(int)EDigitalActions_InGameControls.fire]);",
				"for (int j = 0; j < ret; ++j) {",
				"\tprint(j + \": \" + origins[j]);",
				"}"
			]
		},
		{
			"name": "GetAnalogActionHandle",
			"skip": "Called in Precache()"
		},
		{
			"name": "GetAnalogActionData",
			"preindent": [
				"GUILayout.Label(\"InGameControls Analog Actions:\");",
				"for (int j = 0; j < m_nInGameControlsAnalogActions; ++j) {"
			],
			"args": ["m_InputHandles[i]", "m_InGameControlsAnalogActions[j]"],
			"postindent": ["}"],
			"label": true,
			"indent": 1
		},
		{
			"name": "GetAnalogActionOrigins",
			"args": ["m_InputHandles[i]", "m_ActionSets[(int)EActionSets.InGameControls]", "m_InGameControlsAnalogActions[(int)EAnalogActions_InGameControls.Throttle]", "origins"],
			"precall": [
				"EInputActionOrigin[] origins = new EInputActionOrigin[Constants.STEAM_INPUT_MAX_ORIGINS];"
			],
			"postprint": [
				"print(ret + \" origins for: \" + m_ActionSetNames[(int)EActionSets.InGameControls] + \"::\" + m_InGameControlsAnalogActionNames[(int)EAnalogActions_InGameControls.Throttle]);",
				"for (int j = 0; j < ret; ++j) {",
				"\tprint(j + \": \" + origins[j]);",
				"}"
			],
			"indent": -1
		},
		{
			"name": "GetGlyphForActionOrigin",
			"args": ["EInputActionOrigin.k_EInputActionOrigin_XBoxOne_A"]
		},
		{
			"name": "GetStringForActionOrigin",
			"args": ["EInputActionOrigin.k_EInputActionOrigin_XBoxOne_A"]
		},
		{
			"name": "StopAnalogActionMomentum",
			"preindent": [
				"GUILayout.Label(\"InGameControls Analog Actions:\");",
				"for (int j = 0; j < m_nInGameControlsAnalogActions; ++j) {"
			],
			"args": ["m_InputHandles[i]", "m_InGameControlsAnalogActions[j]"],
			"postindent": [
				"}"
			],
			"indent": 1
		},
		{
			"name": "GetMotionData",
			"args": ["m_InputHandles[i]"],
			"indent": -1
		},
		{
			"name": "TriggerVibration",
			"args": ["m_InputHandles[i]", "ushort.MaxValue", "ushort.MaxValue"]
		},
		{
			"name": "SetLEDColor",
			"args": ["m_InputHandles[i]", "0", "0", "255", "(int)ESteamInputLEDFlag.k_ESteamInputLEDFlag_SetColor"]
		},
		{
			"name": "TriggerHapticPulse",
			"args": ["m_InputHandles[i]", "ESteamControllerPad.k_ESteamControllerPad_Right", "5000"]
		},
		{
			"name": "TriggerRepeatedHapticPulse",
			"args": ["m_InputHandles[i]", "ESteamControllerPad.k_ESteamControllerPad_Right", "5000", "0", "0", "0"]
		},
		{
			"name": "ShowBindingPanel",
			"args": ["m_InputHandles[i]"]
		},
		{
			"name": "GetInputTypeForHandle",
			"label": true,
			"args": ["m_InputHandles[i]"]
		},
		{
			"name": "GetControllerForGamepadIndex",
			"label": true,
			"args": ["0"]
		},
		{
			"name": "GetGamepadIndexForController",
			"label": true,
			"args": ["m_InputHandles[i]"]
		},
		{
			"name": "GetStringForXboxOrigin",
			"args": ["EXboxOrigin.k_EXboxOrigin_A"]
		},
		{
			"name": "GetGlyphForXboxOrigin",
			"args": ["EXboxOrigin.k_EXboxOrigin_A"]
		},
		{
			"name": "GetActionOriginFromXboxOrigin",
			"args": ["m_InputHandles[i]", "EXboxOrigin.k_EXboxOrigin_A"]
		},
		{
			"name": "TranslateActionOrigin",
			"args": ["ESteamInputType.k_ESteamInputType_XBoxOneController", "EInputActionOrigin.k_EInputActionOrigin_XBoxOne_A"]
		},
		{
			"name": "GetDeviceBindingRevision",
			"outargs": [["int", "pMajor"], ["int", "pMinor"]],
			"args": ["m_InputHandles[i]", "out pMajor", "out pMinor"]
		},
		{
			"name": "GetRemotePlaySessionID",
			"args": ["m_InputHandles[i]"],
			"postindent": [
				"}"
			]
		}
	]
}
