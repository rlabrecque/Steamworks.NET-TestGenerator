{
    "variables":
    [
        ["CSteamID", "m_Friend"],
        ["CSteamID", "m_Clan"],
        ["CSteamID", "m_CoPlayFriend"],
        ["Texture2D", "m_SmallAvatar", "GUILayout.Label(m_SmallAvatar);"],
        ["Texture2D", "m_MediumAvatar", "GUILayout.Label(m_MediumAvatar);"],
        ["Texture2D", "m_LargeAvatar", "GUILayout.Label(m_LargeAvatar);"]
    ],

    "onenablecode": [
        "if (SteamFriends.GetFriendCount(EFriendFlags.k_EFriendFlagImmediate) == 0) {",
        "\tDebug.LogError(\"You must have atleast one friend to use the SteamFriends test!\");",
        "\tenabled = false;",
        "\treturn;",
        "}",
        "",
        "if (SteamFriends.GetClanCount() == 0) {",
        "\tDebug.LogError(\"You must have atleast one clan to use the SteamFriends test!\");",
        "\tenabled = false;",
        "\treturn;",
        "}"
    ],

    "functions":
    [
        {
            "name": "GetPersonaName",
            "label": true
        },
        {
            "name": "SetPersonaName",
            "args": ["SteamFriends.GetPersonaName()"]
        },
        {
            "name": "GetPersonaState",
            "label": true
        },
        {
            "name": "GetFriendCount",
            "label": true,
            "args": ["EFriendFlags.k_EFriendFlagImmediate"]
        },
        {
            "name": "GetFriendByIndex",
            "label": true,
            "args": ["0", "EFriendFlags.k_EFriendFlagImmediate"],
            "returnname": "m_Friend"
        },
        {
            "name": "GetFriendRelationship",
            "label": true,
            "args": ["m_Friend"]
        },
        {
            "name": "GetFriendPersonaState",
            "label": true,
            "args": ["m_Friend"]
        },
        {
            "name": "GetFriendPersonaName",
            "label": true,
            "args": ["m_Friend"]
        },
        {
            "name": "GetFriendGamePlayed",
            "override": [
                "{",
                "\tvar fgi = new FriendGameInfo_t();",
                "\tbool ret = SteamFriends.GetFriendGamePlayed(m_Friend, out fgi);",
                "\tGUILayout.Label(\"GetFriendGamePlayed(m_Friend, out fgi) : \" + ret + \" -- \" + fgi.m_gameID + \" -- \" + fgi.m_unGameIP + \" -- \" + fgi.m_usGamePort + \" -- \" + fgi.m_usQueryPort + \" -- \" + fgi.m_steamIDLobby);",
                "}"
            ]
        },
        {
            "name": "GetFriendPersonaNameHistory",
            "label": true,
            "args": ["m_Friend", "1"]
        },
        {
            "name": "GetFriendSteamLevel",
            "label": true,
            "args": ["m_Friend"]
        },
        {
            "name": "GetPlayerNickname",
            "label": true,
            "args": ["m_Friend"]
        },
        {
            "name": "GetFriendsGroupCount",
            "override": [
                "{",
                "\tint FriendsGroupCount = SteamFriends.GetFriendsGroupCount();",
                "\tGUILayout.Label(\"GetFriendsGroupCount() : \" + FriendsGroupCount);"
            ]
        },
        {
            "name": "GetFriendsGroupIDByIndex",
            "override": [
                "\tif (FriendsGroupCount > 0) {",
                "\t\tFriendsGroupID_t FriendsGroupID = SteamFriends.GetFriendsGroupIDByIndex(0);",
                "\t\tGUILayout.Label(\"SteamFriends.GetFriendsGroupIDByIndex(0) : \" + FriendsGroupID);"
            ]
        },
        {
            "name": "GetFriendsGroupName",
            "override": [
                "\t\tGUILayout.Label(\"GetFriendsGroupName(FriendsGroupID) : \" + SteamFriends.GetFriendsGroupName(FriendsGroupID));"
            ]
        },
        {
            "name": "GetFriendsGroupMembersCount",
            "override": [
                "\t\tint FriendsGroupMembersCount = SteamFriends.GetFriendsGroupMembersCount(FriendsGroupID);",
                "\t\tGUILayout.Label(\"GetFriendsGroupMembersCount(FriendsGroupID) : \" + FriendsGroupMembersCount);"
            ]
        },
        {
            "name": "GetFriendsGroupMembersList",
            "override": [
                "\t\tif (FriendsGroupMembersCount > 0) {",
                "\t\t\tCSteamID[] FriendsGroupMembersList = new CSteamID[FriendsGroupMembersCount];",
                "\t\t\tSteamFriends.GetFriendsGroupMembersList(FriendsGroupID, FriendsGroupMembersList, FriendsGroupMembersCount);",
                "\t\t\tGUILayout.Label(\"GetFriendsGroupMembersList(FriendsGroupID, FriendsGroupMembersList, FriendsGroupMembersCount) : \" + FriendsGroupMembersList[0]);",
                "\t\t}",
                "\t}",
                "}"
            ]
        },
        {
            "name": "HasFriend",
            "label": true,
            "args": ["m_Friend", "EFriendFlags.k_EFriendFlagImmediate"]
        },
        {
            "name": "GetClanCount",
            "label": true
        },
        {
            "name": "GetClanByIndex",
            "override": [
                "m_Clan = SteamFriends.GetClanByIndex(0);",
                "GUILayout.Label(\"GetClanByIndex(0) : \" + m_Clan);"
            ]
        },
        {
            "name": "GetClanName",
            "label": true,
            "args": ["m_Clan"]
        },
        {
            "name": "GetClanTag",
            "label": true,
            "args": ["m_Clan"]
        },
        {
            "name": "GetClanActivityCounts",
            "label": true,
            "args": ["m_Clan", "out Online", "out InGame", "out Chatting"],
            "outargs": [["int", "Online"], ["int", "InGame"], ["int", "Chatting"]]
        },
        {
            "name": "DownloadClanActivityCounts",
            "args": ["Clans", "Clans.Length"],
            "precall": ["CSteamID[] Clans = { m_Clan, TestConstants.Instance.k_SteamId_Group_SteamUniverse };"],
            "postcall": ["OnDownloadClanActivityCountsResultCallResult.Set(handle); // This call never seems to produce the CallResult."]
        },
        {
            "name": "GetFriendCountFromSource",
            "override": [
                "{",
                "\tint FriendCount = SteamFriends.GetFriendCountFromSource(m_Clan);",
                "\tGUILayout.Label(\"GetFriendCountFromSource(m_Clan) : \" + FriendCount);"
            ]
        },
        {
            "name": "GetFriendFromSourceByIndex",
            "override": [
                "\tif (FriendCount > 0) {",
                "\t\tGUILayout.Label(\"GetFriendFromSourceByIndex(m_Clan, 0) : \" + SteamFriends.GetFriendFromSourceByIndex(m_Clan, 0));",
                "\t}",
                "}"
            ]
        },
        {
            "name": "IsUserInSource",
            "label": true,
            "args": ["m_Friend", "m_Clan"]
        },
        {
            "name": "SetInGameVoiceSpeaking",
            "args": ["SteamUser.GetSteamID()", "false"]
        },
        {
            "name": "ActivateGameOverlay",
            "args": ["\"Friends\""]
        },
        {
            "name": "ActivateGameOverlayToUser",
            "args": ["\"friendadd\"", "TestConstants.Instance.k_SteamId_rlabrecque"]
        },
        {
            "name": "ActivateGameOverlayToWebPage",
            "args": ["\"http://steamworks.github.io\""]
        },
        {
            "name": "ActivateGameOverlayToStore",
            "args": ["TestConstants.Instance.k_AppId_TeamFortress2", "EOverlayToStoreFlag.k_EOverlayToStoreFlag_None"]
        },
        {
            "name": "SetPlayedWith",
            "args": ["TestConstants.Instance.k_SteamId_rlabrecque"]
        },
        {
            "name": "ActivateGameOverlayInviteDialog",
            "args": ["TestConstants.Instance.k_SteamId_rlabrecque"]
        },
        {
            "name": "GetSmallFriendAvatar",
            "args": ["m_Friend"],
            "postprint": ["m_SmallAvatar = SteamUtilsTest.GetSteamImageAsTexture2D(ret);"]
        },
        {
            "name": "GetMediumFriendAvatar",
            "args": ["m_Friend"],
            "postprint": ["m_MediumAvatar = SteamUtilsTest.GetSteamImageAsTexture2D(ret);"]
        },
        {
            "name": "GetLargeFriendAvatar",
            "args": ["m_Friend"],
            "postprint": ["m_LargeAvatar = SteamUtilsTest.GetSteamImageAsTexture2D(ret);"]
        },
        {
            "name": "RequestUserInformation",
            "args": ["m_Friend", "false"]
        },
        {
            "name": "RequestClanOfficerList",
            "args": ["m_Clan"]
        },
        {
            "name": "GetClanOwner",
            "label": true,
            "args": ["m_Clan"]
        },
        {
            "name": "GetClanOfficerCount",
            "label": true,
            "args": ["m_Clan"]
        },
        {
            "name": "GetClanOfficerByIndex",
            "label": true,
            "args": ["m_Clan", "0"]
        },
        {
            "name": "GetUserRestrictions",
            "label": true
        },
        {
            "name": "SetRichPresence",
            "args": ["\"status\"", "\"Testing 1.. 2.. 3..\""]
        },
        {
            "name": "ClearRichPresence"
        },
        {
            "name": "GetFriendRichPresence",
            "label": true,
            "args": ["SteamUser.GetSteamID()", "\"status\""]
        },
        {
            "name": "GetFriendRichPresenceKeyCount",
            "label": true,
            "args": ["SteamUser.GetSteamID()"]
        },
        {
            "name": "GetFriendRichPresenceKeyByIndex",
            "label": true,
            "args": ["SteamUser.GetSteamID()", "0"]
        },
        {
            "name": "RequestFriendRichPresence",
            "args": ["m_Friend"]
        },
        {
            "name": "InviteUserToGame",
            "args": ["SteamUser.GetSteamID()", "\"testing\""]
        },
        {
            "name": "GetCoplayFriendCount",
            "label": true
        },
        {
            "name": "GetCoplayFriend",
            "args": ["0"],
            "returnname": "m_CoPlayFriend"
        },
        {
            "name": "GetFriendCoplayTime",
            "args": ["m_CoPlayFriend"],
            "label": true
        },
        {
            "name": "GetFriendCoplayGame",
            "args": ["m_CoPlayFriend"],
            "label": true
        },
        {
            "name": "JoinClanChatRoom",
            "args": ["m_Clan"]
        },
        {
            "name": "LeaveClanChatRoom",
            "args": ["m_Clan"]
        },
        {
            "name": "GetClanChatMemberCount",
            "label": true,
            "args": ["m_Clan"]
        },
        {
            "name": "GetChatMemberByIndex",
            "label": true,
            "args": ["m_Clan", "0"]
        },
        {
            "name": "SendClanChatMessage",
            "args": ["m_Clan", "\"Test\""]
        },
        {
            "name": "GetClanChatMessage",
            "override": ["//GUILayout.Label(\"SteamFriends.GetClanChatMessage() : \" + SteamFriends.GetClanChatMessage()); // N/A - Must be called from within the callback OnGameConnectedClanChatMsg"]
        },
        {
            "name": "IsClanChatAdmin",
            "label": true,
            "args": ["m_Clan", "m_Friend"]
        },
        {
            "name": "IsClanChatWindowOpenInSteam",
            "label": true,
            "args": ["m_Clan"]
        },
        {
            "name": "OpenClanChatWindowInSteam",
            "args": ["m_Clan"]
        },
        {
            "name": "CloseClanChatWindowInSteam",
            "args": ["m_Clan"]
        },
        {
            "name": "SetListenForFriendsMessages",
            "args": ["true"]
        },
        {
            "name": "ReplyToFriendMessage",
            "args": ["SteamUser.GetSteamID()", "\"Testing!\""]
        },
        {
            "name": "GetFriendMessage",
            "override": ["//GUILayout.Label(\"SteamFriends.GetFriendMessage() : \" + SteamFriends.GetFriendMessage()); // N/A - Must be called from within the callback OnGameConnectedFriendChatMsg"]
        },
        {
            "name": "GetFollowerCount",
            "args": ["SteamUser.GetSteamID()"]
        },
        {
            "name": "IsFollowing",
            "args": ["m_Friend"]
        },
        {
            "name": "EnumerateFollowingList",
            "args": ["0"]
        },
        {
            "name": "IsClanPublic",
            "label": true,
            "args": ["m_Clan"]
        },
        {
            "name": "IsClanOfficialGameGroup",
            "label": true,
            "args": ["m_Clan"]
        },
        {
            "name": "GetNumChatsWithUnreadPriorityMessages",
            "label": true
        },
        {
            "name": "ActivateGameOverlayRemotePlayTogetherInviteDialog",
            "args": ["m_Friend"]
        }
    ],

    "callresults":
    [
        "ClanOfficerListResponse_t",
        "DownloadClanActivityCountsResult_t",
        "JoinClanChatRoomCompletionResult_t",
        "FriendsGetFollowerCount_t",
        "FriendsIsFollowing_t",
        "FriendsEnumerateFollowingList_t",
        "SetPersonaNameResponse_t"
    ],

    "callbacks":
    {
        "GameConnectedClanChatMsg_t":
        {
            "customcode":
            [
                "string Text;",
                "EChatEntryType ChatEntryType;",
                "CSteamID Chatter;",
                "int ret = SteamFriends.GetClanChatMessage(pCallback.m_steamIDClanChat, pCallback.m_iMessageID, out Text, 2048, out ChatEntryType, out Chatter); // Must be called from within OnGameConnectedClanChatMsg",
                "print(ret + \" \" + Chatter + \": \" + Text);"
            ]
        },
        "GameConnectedFriendChatMsg_t":
        {
            "customcode":
            [
                "string Text;",
                "EChatEntryType ChatEntryType;",
                "int ret = SteamFriends.GetFriendMessage(pCallback.m_steamIDUser, pCallback.m_iMessageID, out Text, 2048, out ChatEntryType); // Must be called from within OnGameConnectedFriendChatMsg",
                "print(ret + \" \" + pCallback.m_steamIDUser + \": \" + Text);"
            ]
        }
    }
}